version: '3'
services:
  zookeeper-server:
    image: wurstmeister/zookeeper
    restart: always
  kafka-server:
    image: wurstmeister/kafka
    restart: always
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-server
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-server:2181
  admin-server:
    image: training/admin-server
    restart: always
    environment:
      PORT: 8090
    ports:
      - "8090:8090"
  configuration-server:
    image: training/configuration-server
    restart: always
    environment:
      #SERVER_PORT: 8888
      PORT: 8888
      GIT_URI: https://github.com/landrzejewski/spring-cloud-training
      KAFKA_BROKERS: kafka-server
      ENCRYPT_KEY: YWMMEHRICKEU
    # ports:
    #  - "8888:8888"
  discovery-server:
    image: training/discovery-server
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
    ports:
      - "8761:8761"
  gateway-server:
    image: training/gateway-server
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
    ports:
      - "8080:8080"
  jaeger-server:
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - "16686:16686"
  elastic-server:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1
    restart: always
    container_name: elasticsearch
    environment:
      discovery.type: "single-node"
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9300:9300"
      - "9200:9200"
  logstash-server:
    image: docker.elastic.co/logstash/logstash:7.14.1
    restart: always
    depends_on:
      - elastic-server
    container_name: logstash
    command:
      logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./configuration-files/logstash.conf:/etc/logstash/conf.d/logstash.conf
    ports:
      - "5000:5000"
  kibana-server:
    image: docker.elastic.co/kibana/kibana:7.14.1
    restart: always
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elastic-server:9300
    ports:
      - "5601:5601"
  alertmanager-server:
    image: prom/alertmanager
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./configuration-files/alertmanager.yml:/etc/prometheus/alertmanager.yml
  prometheus-server:
    image: prom/prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./configuration-files/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configuration-files/rules.yml:/etc/prometheus/rules.yml
  grafana-server:
    image: grafana/grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./configuration-files/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
  postgres-server:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=training
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - PGDATA=/database
    command: ["postgres", "-c", "log_statement=all"]
    volumes:
      - ./data/postgres:/database
  keycloak-server:
    image: quay.io/keycloak/keycloak:19.0.0
    command:
      - start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: "POSTGRES"
      DB_ADDR: "postgres-server"
      DB_USER: "admin"
      DB_PASSWORD: "admin"
      DB_DATABASE: "training"
      KEYCLOAK_FRONTEND_URL: "http://keycloak-server:8080"
    ports:
      - "8100:8080"
  mongodb-server:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "admin"
      MONGO_INITDB_ROOT_PASSWORD: "admin"
      MONGO_INITDB_ROOT_DATABASE: "payments"
  broker-service:
    image: training/broker-service
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
      MONGO_INITDB_ROOT_DATABASE: "payments"
  warehouse-service:
    image: training/warehouse-service
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
  payments-service:
    image: training/payments-service
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
  shop-service:
    image: training/shop-service
    restart: always
    environment:
      PROFILE: production
      CONFIGURATION_SERVER: optional:configserver:http://configuration-server:8888
  registry-server:
    image: registry
    restart: always
    container_name: registry
    ports:
      - "5000:5000"
  portainer:
    image: portainer/portainer-ce
    restart: always
    ports:
      - "10005:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/portainer:/data




